import libc
import pink.std
import pink.std.os

enum { MAX_SEARCH_PATHS = 256 }
var static_package_search_paths: char const*[MAX_SEARCH_PATHS];
var package_search_paths: char const** = static_package_search_paths;
var num_package_search_paths: int;

fun add_package_search_path(path: char const*) {
    if (flag_verbose) {
        printf("Adding package search path %s\n", path);
    }
    package_search_paths[num_package_search_paths++] = str_intern(path);
}

fun add_package_search_path_range(start: char const*, end: char const*) {
    path: char[MAX_PATH];
    len: usize = clamp_max(end - start, MAX_PATH - 1);
    memcpy(path, start, len);
    path[len] = 0;
    add_package_search_path(path);
}

fun init_package_search_paths() {
    pinkhome_var := getenv("PINK_HOME");
    if (!pinkhome_var) {
        printf("error: Set the environment variable PINK_HOME to the Pink home directory (where `lib` is located)\n");
        exit(1);
    }
    path: char[MAX_PATH];
    path_copy(path, pinkhome_var);
    path_join(path, "lib");
    add_package_search_path(path);
    add_package_search_path(".");
    add_package_search_path("vendor");
    add_package_search_path("src");
    pinkpath_var := getenv("PINK_PATH");
    if (pinkpath_var) {
        start := pinkpath_var;
        for (ptr := pinkpath_var; *ptr; ptr++) {
            if (*ptr == ';') {
                add_package_search_path_range(start, ptr);
                start = ptr + 1;
            }
        }
        if (*start) {
            add_package_search_path(start);
        }
    }
}

fun init_compiler() {
    init_target();
    init_package_search_paths();
    init_keywords();
    init_builtin_types();
    map_put(&decl_note_names, declare_note_name, (:void*)1);
}

fun parse_env_vars() {
    pinkos_var := getenv("PINK_OS");
    if (pinkos_var) {
        os := get_os(pinkos_var);
        if (os == -1) {
            printf("Unknown target operating system in PINK_OS environment variable: %s\n", pinkos_var);
        } else {
            target_os = os;
        }
    }
    pinkarch_var := getenv("PINK_ARCH");
    if (pinkarch_var) {
        arch := get_arch(pinkarch_var);
        if (arch == -1) {
            printf("Unknown target architecture in PINK_ARCH environment variable: %s\n", pinkarch_var);
        } else {
            target_arch = arch;
        }
    }
}

fun pink_entry(argc: int, argv: char const**, gen_all: fun(), extension: char const*): int {
    parse_env_vars();
    output_name: char const*;
    flag_check := false;
    add_flag_str("o", &output_name, "file", "Output file (default: out_<main-package>.c)");
    add_flag_enum("os", &target_os, "Target operating system", os_names, NUM_OSES);
    add_flag_enum("arch", &target_arch, "Target machine architecture", arch_names, NUM_ARCHES);
    add_flag_bool("check", &flag_check, "Semantic checking with no code generation");
    add_flag_bool("lazy", &flag_lazy, "Only compile what's reachable from the main package");
    add_flag_bool("nosourcemap", &flag_nosourcemap, "Don't generate any source map information");
    add_flag_bool("notypeinfo", &flag_notypeinfo, "Don't generate any typeinfo tables");
    add_flag_bool("fullgen", &flag_fullgen, "Force full code generation even for non-reachable symbols");
    add_flag_bool("verbose", &flag_verbose, "Extra diagnostic information");
    program_name := parse_flags(&argc, &argv);
    if (argc != 1) {
        printf("Usage: %s [flags] <main-package>\n", program_name);
        print_flags_usage();
        return 1;
    }
    package_name := argv[0];
    if (flag_verbose) {
        printf("Target operating system: %s\n", os_names[target_os]);
        printf("Target architecture: %s\n", arch_names[target_arch]);
    }
    init_compiler();
    builtin_package = import_package("builtin");
    if (!builtin_package) {
        printf("error: Failed to compile package 'builtin'.\n");
        return 1;
    }
    builtin_package.external_name = str_intern("");
    main_package := import_package(package_name);
    if (!main_package) {
        printf("error: Failed to compile package '%s'\n", package_name);
        return 1;
    }
    main_name := str_intern("main");
    main_sym := get_package_sym(main_package, main_name);
    if (!main_sym) {
        printf("error: No 'main' entry point defined in package '%s'\n", package_name);
        return 1;
    }
    main_sym.external_name = main_name;
    reachable_phase = REACHABLE_NATURAL;
    resolve_sym(main_sym);
    for (i: usize = 0; i < buf_len(package_list); i++) {
        if (package_list[i].always_reachable) {
            resolve_package_syms(package_list[i]);
        }
    }
    finalize_reachable_syms();
    if (flag_verbose) {
        printf("Reached %d symbols in %d packages from %s/main\n", (:int)buf_len(reachable_syms), (:int)buf_len(package_list), package_name);
    }
    if (!flag_lazy) {
        reachable_phase = REACHABLE_FORCED;
        for (i: usize = 0; i < buf_len(package_list); i++) {
            resolve_package_syms(package_list[i]);
        }
        finalize_reachable_syms();
    }
    if (!flag_check) {
        c_path: char[MAX_PATH];
        if (output_name) {
            path_copy(c_path, output_name);
        } else {
            snprintf(c_path, sizeof(c_path), "out_%s.%s", package_name, extension);
        }
        gen_all();
        c_code := gen_buf;
        gen_buf = NULL;
        if (!write_file(c_path, c_code, buf_len(c_code))) {
            printf("error: Failed to write file: %s\n", c_path);
            return 1;
        }
    }
    return 0;
}

#always

var flag_verbose: bool;
var flag_lazy: bool;
var flag_nosourcemap: bool;
var flag_notypeinfo: bool;
var flag_fullgen: bool;

fun main(argc: int, argv: char const**): int {
    pink_entry(argc, argv, gen_all, "c");
    return 0;
}
